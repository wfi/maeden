[v.2017.04.01]
-----------------------------------------------------
------------- Maeden Socket Communication -----------
-----------------------------------------------------

All communication between the Maeden simulator and an agent controller
is done through the standard socket layer.  Sockets provide
versatility in the Maeden Simulator so that controllers written in
different languages can still interact with Maeden worlds.  The Grid
class provides the code for the server socket that accepts connections
from agent controllers.  Maeden listens on port number 7237, known
within the simulator source code as MAEDENPORT.

Once a connection is established, the socket is used for two-way
communication between the Grid server and agent controller; the socket
carries sensory data from server to agent and action commands from
agent to server (see Sensory-Motor Interface README for protocol).
Agent controllers are given ID's starting with 0 according to the
order in which they contact the server.

Initial Handshake: registering with the server.  An agent controller
will join a simulation by first attempting to establish a socket
connection with the server on the designated MAEDENPORT at the host on
which the simulator is running.  If the server accepts the connection
from the controller, it will send to the agent controller the ID that
has been assigned to it followed by an initial sensory packet.  The ID
is sent as a plain text string (newline terminated); the sensory
packet is sent in JSON format as described in the Sensory-Motor
Interface README (README.SensoryMotor).  After the initial connection
and first sensory packet, the server will wait for a command from the
controller.

Once a command is received (the format of which is also described in
README.SensoryMotor), the server processes the command and determines
the consequences of the given action.  A new sensory packet is created
based on the modified conditions resulting from the action performed.

Once the simulation is ended (when the food is eaten if
EAT_FOOD_ENDS_IT is true), each socket is closed in the method
Grid.cleanClose().  All buffers are exited (for the agent) and the
sockets are closed (for the agent and the Grid server socket).  [If
the user overrides the default behavior where eating the food
terminates the simulator, then the server must be killed manually.]

To connect to the server socket (in Java):
try{
    gridSocket = new Socket([hostname], MAEDENPORT);
} catch(UnknownHostException e) {
} catch(IOException e) {
}

New agent controllers should consider using the GridClient class (when
using Java or as inspiration in other languages) to streamline
connection issues.