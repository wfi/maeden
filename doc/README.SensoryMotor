[v.2017.09.30]
--------------------------------------------------------------
----------  Maeden Sensory-Motor Interface Protocol  ---------
--------------------------------------------------------------

When an agent controller first connects to the Grid server, it opens a
socket connect and enters a sense/think/act cycle.  Sensory
information is provided by the grid server to the controller, by some
unspecified mechanism the agent chooses an action, and then sends the
appropriate command to the server.  Information is sent back and forth
between the Grid server and agent controllers in a JSON format. This
allows agent controllers to be implemented in any language that
supports both the standard socket layer and JSON.

[note: currently only sensory information is handled like this, and
that only incompletely. The visual information, ground contents, and
perhaps other fields need to be converted to JSON arrays; currently
just strings. Finally, the agent actions need to be sent by
controllers and received by the Grid server via JSON objects (or
arrays).]

SENSORY INFORMATION

Each of the sensory modalities, here numbered 0 through 8, is stored
in a JSON Array. The elements of the array vary in their type.  On the
server side, the method sendSensationsToAgent(GOBAgent) handles the
packaging and sending of the information.  On the controller side, the
SensoryPacket class handles the receiving and unpacking of the data,
as well as provides an interface to that information.  The elements of
the JSON array are as follows:

0. Simulation status. [String] The first field is one of four string
values: "DIE", "SUCCESS", "END", or "CONTINUE".  DIE is sent when the
agent runs out of energy or falls into quicksand.  SUCCESS is sent
when the agent eats the food (only when the default EAT_FOOD_ENDS_IT
flag is true).  (In the non-default simulator mode, eating an item of
food simply increases the agent's energy by a set amount; this
increase is reflected in the next sensory packet sent to the agent.)
END is sent when some other agent eats the food (in the default
condition).  CONTINUE is sent in all other cases.

1. The "smell" direction to the food source. [String] This is sent as
the direction to the food-source relative to the agent's current
heading.  The value will be the first character of the appropriate
relative direction: "forward", "back", "right", "left", or "here"
(i.e., 'f', 'b', 'r', 'l', or 'h').  When the food source is located
on the main diagonals with respect to the agent's current location,
the smell reports forward or back as appropriate (instead of right or
left).  A food source may have one or more pieces of food.  When an
agent attempts to grab the food source, it ends up with a piece of
food in its inventory.  The food source remains in place and continues
to provide the smell direction regardless of the food pieces that may
be carried or dropped by any agents.

2. The "inventory" of the agent is sent. [Array of String] The
inventory is sent as an array of single-character strings, one for
each item currently carried by the agent.  Example objects that may be
carried include: "K", "T", "G", "+", or "$".  K indicates the agent is
carrying a key, T a hammer, + the food, etc.  If the agent's inventory
is empty, the empty array will be sent.

3. The "sight" information. [Array of Array of Array of String] The agent has a visual field that is
seven (7) cells deep and five (5) cells wide.  The agent can see one
row behind it, the current row (i.e., two cells to either side), and
five (5) rows ahead.
Visual information is given as a multi-level JSON array.
For example, if the agent with ID of 2 was standing with a key and a
hammer to its left, while facing a wall with a door two cells away and
the food three rows beyond the door, the received visual information
line would look like this (without line-breaks):

[note: convert this to the appropriate JSON representation, replacing
empty cells with empty arrays. (would that be null?)]

((()     ()       ()     ()     ()   )

 (()     ("K" "T")("2")  ()     ()   )

 (()     ()       ()     ()     ()   )

 (("*")  ("*")    ("#")  ("*")  ("*"))

 (()     ()       ()     ()     ()   )

 (()     ()       ()     ()     ()   )

 (()     ()       ("+")  ()     ()   ))

Note: * = wall
      T = hammer
      @ = Rock
      # = Door
      K = key
      R = Robot
      G = ray-gun
     [0-9] = Agent with particular ID
      H = Helper Agent
      + = food source or food piece (distinguish via smell)
      O = food collection point (letter Oh)
      $ = gold piece

Note, this presentation may be logically thought of as a view from
underneath the agent, with the agent facing toward the bottom of the
screen. The actual origin of the array [0,0] is over the agent's left
shoulder.  However, it may be convenient for an agent controller to
work in "agent-centered" coordinates where the agent is always located
at [0,0] with negative rows and columns over the left shoulder.  This
is left as an exercise for designers of agents.

4. The ground contents. [Array of String] The contents of the cell
where the agent is located is sent as an array with elements for each item present there.
Each item's print-character
(if there is such an item) appears as a one-character string.
For example: ["K", "$"] for the situation where there is a key and a money piece in the
same location as the agent.
The empty array, [], is sent if
nothing other than the agent is present.

Note: the agent-self does not appear in the ground contents, but
_does_ appear in the visual information.

5. The "messages" that this agent hears. [Array of JSON Object]

[note: currently messages are effectively unsupported and this field
of the array should always be empty.]

All messages that are in
hearing range of the agent are sent as an array.  For example:
(Message1 Message2 Message3 ... MessageN ) Note: Each individual
Message will conform to the format described in Inter-Agent
Communication README.

6. The "energy" is sent. [Number] The amount of energy that the agent
has left.  The lower the amount of energy, the fewer the number of
moves can still be performed by the agent before it dies.  It is sent
and should be interpreted as an integer.

7. The result status. [String] Reports whether the most recent action
attempted by the agent was successful or not; given as either "ok" or
"fail", respectively. Given the physics of the environment, this line
will be "ok" if the action was able to be completed, actually was
completed, and had the desired result. Thus, if the last action was
"f"orward and if the agent actually moved one cell in the direction of
its current heading, the result will be "ok".  However, if the last
action was "u" and either the inventory is empty, the agent is not
facing anything, the tool in the inventory does not match the object
the agent is facing, or for some other reason the expected result does
not happen (perhaps, because non-determinism has been activated in the
environment), then the value for this field will be "fail".

8. The world time is sent. [Number] Because agents sense and act
asynchronously, agents are sent the time maintained by the simulator.
This data should be interpreted as an integer.

EFFECTOR COMMANDS

Maeden agents have a simple set of commands that may be performed.
They may move forward and back; turn left or right; grab, use or drop
an object, or wait and do nothing. (In addition, agents may talk or
shout as described in Inter-Agent Communication README. However, this
communication functionality is currently out of commission.)  Actions
are expressed as JSON objects with a "command" field consisting of a
single-character string, and an optional "arguments" field, consisting
of a JSON array of strings, one for each argument.  The three actions
-- grab, use and drop -- accept an optional argument.  Without this
argument (i.e., either empty array or missing field), the first item
available is selected (for grabbing, using or dropping).  Because more
than one item may rest in a cell or be carried in the inventory, the
optional argument allows the agent to specify a particular item to
grab, use or drop.  Thus, to pick up the food if more than one item
were present on the ground, the command {"command":"g",
"arguments":["+"]} would be sent.  Similarly, if an agent is trying
to open a door and its inventory held: ["$", "+", "K", "$"], the agent
would send the command {"command":"u", "arguments":["K"]} in order to
open a door that it was immediately facing.

In summary, the valid actions are: f, b, r, l, g, u, d, a, and w for
the commands forward, back, turn right, turn left, grab something, use
something from the inventory, drop something from the inventory,
attack another agent, and wait (do nothing), respectively.

BEHAVIOR OF OBJECTS: OBSTACLES AND TOOLS

Doors and Keys.  Doors can be permanently opened by using a key.  If
an agent has a key in its inventory and is facing a door, the use-key
command, {"command":"u", "arguments":["K"]}, will cause the door to
disappear.  Note, this action also consumes the key.

Rocks and Hammers.  As with doors via keys, rocks can be removed by
using a hammer.  The corresponding command would be "u T" (when facing
a rock).  Note, the hammer is _not_ consumed.

Robots and Ray-guns.  A robot may appear as an obstacle and can be
removed by using a ray-gun.  The ray-gun only has an effective distance
of a single space; that is, the agent must be immediately facing the 
robot in order for the ray-gun to remove the obstacle.

Narrows.  If an agent is holding one or more items in its inventory,
in cannot pass through a narrows.  Dropping all the items in the
inventory will allow the agent to pass.

Food.  In the default mode, eating the food terminates the simulation.
When this mode is disabled, eating the food increases the energy of
the agent by a set amount.

Food Supply.  It is actually the food supply that agents smell -- not
food items.  An agent may harvest a food item from the supply only
once every so often.  The interval is independent of which agent last
harvested food.

Gold.  Currently, gold items do nothing, but they're fun to grab.

Attacking.  If an agent is facing another agent and applies the attack
command, the agent that is being hit loses an amount of energy.  It is
possible to kill an agent by repeated attacks.  So be nice.
